# stagging a file
git status => branch, ahead/behind remote, U-untracked files, M-files not staged but modified, Changes staged for commit 
git add ./<filename> => stage a single untracked file
git rm --cached <filename> => to unstage back the untracked files, also unstages modified files back



# to restore to latest commit
git restore --staged notes.txt => restore from stages no change in file but the staged data is removed
git restore notes.txt => file gets changed to previous commit
# to restore to a very old commmit
git log -- notes.txt => find a commit hash for a specific version
git restore --source <commit-hash> -- notes.txt => restore the specific file from a specific commit
git restore --source <commit-hash> -- . => restore codebase to a specific commit



# git reset HEAD file.txt => Unstage file
// if stage changes pushed to github u unstage file, make changes, push and then error occurs.
// GitHub still has the “old” commits we droped => error: failed to push some refs to 'github.com:...
// so use => git push origin branch-name --force and rewrite history
# git reset --hard <commit> => Staging area & working directory → replaced with the exact snapshot of <commit>
# git reset HEAD~1 => restore to 2nd last commit



# Remote origins in git
git remote -v => show origin names
git remote show origin => shows origin with more details
git remote remove origin => remove an origin after adding it
git fetch origin => if remote has some changes then fetch it before pushing
git push origin main => push code to origin and its main branch
git push, git pull => if use -u in "git push -u origin main" -u sets --set-upstream so Git knows where to push and pull by default



# Add the remote with the fetch URL
git remote add origin https://github.com/aniket-2003-das/Git-and-GitHub.git
# Set fetch URL for fetch only if required
git remote set-url origin https://github.com/aniket-2003-das/Git-and-GitHub.git
# Set push URL separately
git remote set-url --push origin git@github.com:aniket-2003-das/Git-and-GitHub.git


